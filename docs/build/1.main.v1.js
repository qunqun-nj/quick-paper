(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{20:function(a,e,p){var i=p(21);"string"==typeof i&&(i=[[a.i,i,""]]),i.locals&&(a.exports=i.locals);(0,p(1).default)("data-quickpaper-01b79832",i,!0)},21:function(a,e,p){(a.exports=p(0)(!1)).push([a.i,"",""])},28:function(a,e,p){"use strict";p.r(e);var i={};p(20);i.render=function(a){return a("div",{class:"quickpaper","data-quickpaper-01b79832":""},[a("div",{class:"doc-view","data-quickpaper-01b79832":""},[a("h2",{"data-quickpaper-01b79832":""},["自定义指令强化标签属性"]),a("p",{"data-quickpaper-01b79832":""},["组件是强化原生标签，指令是强化原生属性，因此用法和原生属性类似，比如我们有一个属性name："]),a("pre",{"q-code":"html","data-quickpaper-01b79832":""},["<input name />"]),a("p",{"data-quickpaper-01b79832":""},["如何自定义指令？自定义指令和组件类似，比如使用Quick Paper上的方法："]),a("pre",{"q-code":"","data-quickpaper-01b79832":""},["QuickPaper.directive('qDemo',{↵↵    // 指令生效的时候↵    inserted:function(el,binding){},↵↵    // 被绑定于元素所在的组件中有数据更新时调用，而无论绑定值是否变化↵    update:function(el,binding){},↵↵    // 只调用一次，指令与元素解绑时调用↵    delete:function(el,binding){}↵});"]),a("p",{"data-quickpaper-01b79832":""},["我们来看看binding中有什么："]),a("pre",{"q-code":"","data-quickpaper-01b79832":""},["binding={↵↵    // 当前Quick Paper对象↵    target,↵↵    // 指令的属性值↵    exp,↵↵    // 指令的属性值在当前Quick Paper中编译后的值↵    value,↵↵    // 比如q-attr:XXX,表示的就是XXX↵    type↵}"]),a("p",{"data-quickpaper-01b79832":""},["当然，指令和组件一样，也支持局部挂载。"])])])};e.default=i}}]);