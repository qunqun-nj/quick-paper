(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{20:function(e,a,p){var i=p(21);"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(e.exports=i.locals);(0,p(1).default)("data-quickpaper-9a03347e",i,!0)},21:function(e,a,p){(e.exports=p(0)(!1)).push([e.i,"",""])},28:function(e,a,p){"use strict";p.r(a);var i={};p(20);i.render=function(e){return e("div",{class:"doc-view",quickpaper:"","data-quickpaper-9a03347e":""},[e("h2",{"data-quickpaper-9a03347e":""},["自定义指令强化标签属性"]),e("p",{"data-quickpaper-9a03347e":""},["组件是强化原生标签，指令是强化原生属性，因此用法和原生属性类似，比如我们有一个属性name："]),e("pre",{"q-code":"html","data-quickpaper-9a03347e":""},["<input name />"]),e("p",{"data-quickpaper-9a03347e":""},["如何自定义指令？自定义指令和组件类似，比如使用Quick Paper上的方法："]),e("pre",{"q-code":"","data-quickpaper-9a03347e":""},["QuickPaper.directive('qDemo',{↵↵    // 指令生效的时候↵    inserted:function(el,binding){},↵↵    // 被绑定于元素所在的组件中有数据更新时调用，而无论绑定值是否变化↵    update:function(el,binding){},↵↵    // 只调用一次，指令与元素解绑时调用↵    delete:function(el,binding){}↵});"]),e("p",{"data-quickpaper-9a03347e":""},["我们来看看binding中有什么："]),e("pre",{"q-code":"","data-quickpaper-9a03347e":""},["binding={↵↵    // 当前Quick Paper对象↵    target,↵↵    // 指令的属性值↵    exp,↵↵    // 指令的属性值在当前Quick Paper中编译后的值↵    value,↵↵    // 比如q-attr:XXX,表示的就是XXX↵    type↵}"]),e("p",{"data-quickpaper-9a03347e":""},["当然，指令和组件一样，也支持局部挂载。"])])};a.default=i}}]);