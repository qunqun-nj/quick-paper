(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{21:function(e,a,p){var c=p(22);"string"==typeof c&&(c=[[e.i,c,""]]),c.locals&&(e.exports=c.locals);(0,p(1).default)("data-quickpaper-bc2bf902",c,!0)},22:function(e,a,p){(e.exports=p(0)(!1)).push([e.i,"",""])},32:function(e,a,p){"use strict";p.r(a);var c={};p(21);c.render=function(e){return e("div",{class:"doc-view",quickpaper:"","data-quickpaper-bc2bf902":""},[e("h2",{"data-quickpaper-bc2bf902":""},["如何使用？"]),e("h3",{"data-quickpaper-bc2bf902":""},["什么是Quick Paper?"]),e("p",{"data-quickpaper-bc2bf902":""},["首先需要理解的是设计理念：网站由一个个Quick Paper组件平行或嵌套拼接而成的，每个组件管理页面中的一部分，组件之间可以通信。"]),e("p",{"data-quickpaper-bc2bf902":""},["Quick Paper管理的区域里面你可以使用原生的标签和内置或扩展的东西，而这其中最重要的东西就是组件。"]),e("h3",{"data-quickpaper-bc2bf902":""},["组件是什么？"]),e("p",{"data-quickpaper-bc2bf902":""},["创建组件对象的方式大致可以分为两种：主动创建和作为标签被动创建。后者就好像在页面中添加一个input框或者img标签一样，而如何定义这个标签，我们稍后就会说明。"]),e("p",{"data-quickpaper-bc2bf902":""},["一般情况下，至少有一个组件对象需要主动创建（一般是根对象），就像下面这样："]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["import QuickPaper from 'quick-paper';↵new QuickPaper({↵↵    // 挂载点↵    el:dom,↵↵    // 视图↵    render:creatFunction↵↵    // 视图也可以用template配置项↵    //（和render互斥，配置一个即可）↵    template:\"html字符串\"↵↵    // 方法↵    methods:{}↵↵    // 双向绑定数据↵    data(){↵        return {};↵    },↵↵    // 生命周期↵    'beforeCreate':callback,↵    'created':callback,↵    'beforeMount':callback,↵    'mounted':callback,↵    'beforeUpdate':callback,↵    'updated':callback,↵    'beforeDestroy':callback,↵    'destroyed':callback,↵↵    // 挂载局部指令或组件↵    directive:{},↵    component:{}↵↵});"]),e("p",{"data-quickpaper-bc2bf902":""},["创建一个组件也就意味着页面中的一个区域交由它来管理，是不是很简单，接着，我们来说说几个比较重要的点："]),e("h4",{"data-quickpaper-bc2bf902":""},[".paper文件"]),e("p",{"data-quickpaper-bc2bf902":""},["一般来说，页面的内容我们是写在.paper文件中，一个.paper文件就是一个组件，拼接成完整的页面的。比如我们有一个App.paper作为根页面："]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["// 引入别的组件↵// 在这个组件里面，又可以引入组件，这样一层层拼接↵// 当然，每次并列引入的组件理论上可以任意多↵import App from './App.paper';↵↵// 根对象↵window.quickPaper = new QuickPaper({↵↵  // 挂载点↵  el: document.getElementById('root'),↵↵  // 配置启动方法↵  render: createElement => createElement(App),↵↵  // 还可以添加方法或生命周期钩子等↵↵});"]),e("p",{"data-quickpaper-bc2bf902":""},["你可能会好奇App.paper的格式："]),e("pre",{"q-code":"html","data-quickpaper-bc2bf902":""},["<template>↵    \x3c!-- 页面模板 --\x3e↵</template>↵↵<script>↵    export default {↵        /*类似控制器的地方*/↵    };↵<\/script>↵↵<style>↵    /*写样式的地方*/↵</style>"]),e("h4",{"data-quickpaper-bc2bf902":""},["render函数"]),e("p",{"data-quickpaper-bc2bf902":""},["对于.paper文件，主体内容主要是在字符串模板template中，其最终会被解析成render，表示当前组件管理的视图，我们就来看看render是什么？"]),e("p",{"data-quickpaper-bc2bf902":""},["假如我们有一个template如下："]),e("pre",{"q-code":"html","data-quickpaper-bc2bf902":""},["<div>↵    <label>QuickPaper</label>↵    <p class='content'>一个渐进型的前端小框架</p>↵</div>"]),e("p",{"data-quickpaper-bc2bf902":""},["转换成render函数以后就是："]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["render:function(createElement){↵    return createElement('div',{},[↵        createElement('label',{},['QuickPaper']),↵        createElement('p',{class:'content'},['一个渐进型的前端小框架'])↵    ]);↵}"]),e("p",{"data-quickpaper-bc2bf902":""},["你可以直接在传递一个render或者templagte配置项，但是我们更推荐你使用.paper文件，那样更简单且容易维护。"]),e("h3",{"data-quickpaper-bc2bf902":""},["自定义组件"]),e("p",{"data-quickpaper-bc2bf902":""},["template（或者说render）中可以包含组件来加强原生标签的功能，如何定义一个组件（也就是上面提到的自定义标签）？"]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["QuickPaper.component('tagName',options);"]),e("p",{"data-quickpaper-bc2bf902":""},["其中options和new QuickPaper(options)是一致的，只不过el属性不需要传递了，使用的时候这样："]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["<tag-name></tag-name>"]),e("p",{"data-quickpaper-bc2bf902":""},["或"]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["<tag-name />"]),e("p",{"data-quickpaper-bc2bf902":""},["这样定义的组件是全局的，如果你希望定义的组件只在当前组件中有效，可以这样挂载："]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},['new QuickPaper(↵    ...↵    component:{↵        "tagName":option↵    }↵);']),e("h3",{"data-quickpaper-bc2bf902":""},["自定义指令强化标签属性"]),e("p",{"data-quickpaper-bc2bf902":""},["组件是强化原生标签，指令是强化原生属性，因此用法和原生属性类似，比如我们有一个属性name："]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["<input name />"]),e("p",{"data-quickpaper-bc2bf902":""},["如何自定义指令？自定义指令和组件类似，比如使用Quick Paper上的方法："]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["QuickPaper.directive('qDemo',{↵↵    // 指令生效的时候↵    inserted:function(el,binding){},↵↵    // 被绑定于元素所在的组件中有数据更新时调用，而无论绑定值是否变化↵    update:function(el,binding){},↵↵    // 只调用一次，指令与元素解绑时调用↵    delete:function(el,binding){}↵});"]),e("p",{"data-quickpaper-bc2bf902":""},["我们来看看binding中有什么："]),e("pre",{"q-code":"","data-quickpaper-bc2bf902":""},["binding={↵↵    // 当前Quick Paper对象↵    target,↵↵    // 指令的属性值↵    exp,↵↵    // 指令的属性值在当前Quick Paper中编译后的值↵    value,↵↵    // 比如q-attr:XXX,表示的就是XXX↵    type↵}"]),e("p",{"data-quickpaper-bc2bf902":""},["当然，指令和组件一样，也支持局部挂载。"])])};a.default=c}}]);