<template class='doc-view'>
    <h2>
        指令列表
    </h2>
    <p>
        对于一些常用的加强属性Quick Paper内置提供了实现，具体如下：
    </p>
    <h3>
        q-model：双向绑定，一般用于输入框，可以实现视图和数据之间的同步
    </h3>
    <pre q-code='html'><input q-model='param'/></pre>
    <p>
        其中param需要提前在data中注册（下同）。
    </p>
    <h3>
        q-bind：单项数据绑定，只会主动同步数据到视图
    </h3>
    <pre q-code><div q-bind='param' q-bind:param='param'></div></pre>
    <p>
        上面我们演示了两种用法，第一种会修改标签的value或innerText,第二种会修改标签的param属性。
    </p>
    <p>
        再来看个例子：
    </p>
    <pre q-code='html'><div>undefined</div></pre>
    <p>
        上面的写法类似q-bind的第一种用法。
    </p>
    <h3>
        q-on：用于在标签中注册DOM事件
    </h3>
    <pre q-code='html'><div q-on:click='doit()'>点击我</div></pre>
    <p>
        上面我们演示的是单击，如果把.click改成.dblclick就是双击，别的DOM事件也类似。
    </p>
    <p>
        除此之外，还有几个特殊的选项（可以同时使用）：
    </p>
    <pre q-code='html'><div q-on:click.once='doit()'>点击我</div></pre>
    <p>
        上面我们添加了.once，表示点击一次后就会失效,一共有以下可选：
    </p>
    <ul>
        <li>
            1.prevent 阻止默认事件
        </li>
        <li>
            2.stop 阻止冒泡
        </li>
        <li>
            3.once 只执行一次
        </li>
    </ul>
    <p>
        有时候为了方便，q-on:可以用@代替，比如开始的例子改写一下：
    </p>
    <pre q-code='html'><div @click='doit()'>点击我</div></pre>
    <h3>
        q-code：用于提供代码显示
    </h3>
    <p>
        比如你想显示个打印语句：console.log('你好');
    </p>
    <pre q-code='html'>&lt;pre q-code&gt;console.log('你好');&lt;/pre&gt;</pre>
    <p>
        如果你知道你需要显示的代码是什么语言，你还可以进行指定语言类型，比如上面的是一个js:
    </p>
    <pre q-code='html'>&lt;pre q-code='javascript'&gt;console.log('你好');&lt;/pre&gt;</pre>
    <p>
        我们目前支持的语言类型如下：
    </p>
    <ul>
        <li>
            1.html:可以显示标签类型的，比如.vue文件，xml等。
        </li>
        <li>
            2.css:样式类型的文件。
        </li>
        <li>
            3.javascript:默认值，是为js提供的，不过大部分情况下，都可以正常使用。
        </li>
    </ul>
    <p>
        此外，如果你希望显示的区域可编辑，可以这样设置：
    </p>
    <pre q-code='html'>&lt;pre q-code:editor='javascript'&gt;console.log('你好');&lt;/pre&gt;</pre>
</template>
